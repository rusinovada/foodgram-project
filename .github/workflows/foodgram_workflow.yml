name: Django-app-foodgram-project workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install dependencies
      run: |
        # обновление pip
        python -m pip install --upgrade pip
        # установка flake8 и его плагинов
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        # перейти в папку, содержащую requirements.txt
        cd backend/
        # установка зависимостей
        pip install -r requirements.txt
        cd ..
    - name: Tests with flake8
      run: |
        # запуск проверки проекта по flake8
        python -m flake8
  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        # Проверка доступности репозитория Docker Hub для workflow
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        # Вызов сборщика контейнеров docker
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        # Запуск скрипта авторизации на Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push backend to Docker Hub
        # Пуш образа backend в Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./backend
          file: ./backend/Dockerfile
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_backend:latest
      - name: Push frontend to Docker Hub
        # Пуш образа frontend в Docker Hub
        uses: docker/build-push-action@v2
        with:
          push: true
          context: ./frontend
          file: ./frontend/Dockerfile
          tags: ${{ secrets.DOCKER_USERNAME }}/foodgram_frontend:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    steps:
        - name: pull docker image
          uses: appleboy/ssh-action@master
          with:
            host: ${{ secrets.HOST }}
            username: ${{ secrets.USER }}
            key: ${{ secrets.SSH_KEY }}
            passphrase: ${{ secrets.PASSPHRASE }}
            script: |
              sudo docker-compose stop
              sudo docker-compose rm backend
              sudo docker-compose rm frontend
              sudo rm -f .env
              sudo touch .env
              sudo chmod 666 .env
              sudo echo SECRET_KEY=${{ secrets.SECRET_KEY }} >> .env
              sudo echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
              sudo echo DB_NAME=${{ secrets.DB_NAME }} >> .env
              sudo echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
              sudo echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
              sudo echo DB_HOST=${{ secrets.DB_HOST }} >> .env
              sudo echo DB_PORT=${{ secrets.DB_PORT }} >> .env
              sudo echo DEBUG=${{ secrets.DEBUG }} >> .env
              sudo echo ALLOWED_HOSTS=${{ secrets.ALLOWED_HOSTS }} >> .env
              sudo docker-compose up -d --build
              sudo docker-compose exec -T backend python manage.py makemigrations
              sudo docker-compose exec -T backend python manage.py migrate
              sudo docker-compose exec -T backend python manage.py collectstatic --no-input
            
        - name: Send message if deploy failed
          if: ${{ failure() }}
          uses: appleboy/telegram-action@master
          with:
            to: ${{ secrets.TELEGRAM_TO }}
            token: ${{ secrets.TELEGRAM_TOKEN }}
            message: |
              Ошибка при деплое  - ${{ github.repository }}
              https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}
  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
